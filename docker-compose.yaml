services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SQL_USER: ${POSTGRES_USER}
      SQL_PASSWORD: ${POSTGRES_PASSWORD}
      SQL_DB: ${POSTGRES_DB}
      SQL_HOST: "postgresql:5432"
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - point-plan

  postgresql:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    expose:
        - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - point-plan

  public:
    build:
      context: .
      dockerfile: app.Dockerfile
    networks:
      - point-plan

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - point-plan
      - traefik-proxy
    depends_on:
      - server
      - public
    labels:
      - traefik.enable=true
      - traefik.http.routers.point-plan.rule=Host(`${EXPOSE_HOST}`)
      - traefik.http.routers.point-plan.tls=true
      - traefik.http.routers.point-plan.tls.certresolver=le
      - traefik.http.routers.point-plan.entrypoints=websecured
      - traefik.http.routers.point-plan.service=point-plan
      - traefik.http.services.point-plan.loadbalancer.server.port=80


volumes:
  postgresql_data:

networks:
  traefik-proxy:
    external: true
  point-plan:
